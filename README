-------------------------------------------------------------------------------
libserialport: cross-platform library for accessing serial ports
-------------------------------------------------------------------------------

libserialport is a minimal library written in C that is intended to take care
of the OS-specific details when writing software that uses serial ports.

By writing your serial code to use libserialport, you enable it to work
transparently on any platform supported by the library.

The operations that are supported are:

- Port enumeration (obtaining a list of serial ports on the system).
- Obtaining port metadata (USB device information, Bluetooth address, etc).
- Opening and closing ports.
- Setting port parameters (baud rate, parity, etc).
- Reading, writing and flushing data.
- Obtaining error information.

libserialport is an open source project released under the LGPL3+ license.

Status
======

The library should build and work on any Windows or Unix-based system. If it
does not, please submit a bug.

Enumeration is currently implemented on Windows, Mac OS X, FreeBSD and Linux.
On other systems enumeration is not supported, but ports can still be opened
by name and then used.

If you know how to enumerate available ports on another OS, please submit a bug
with this information, or better still a patch implementing it.

Dependencies
============

No other libraries are required.

Non-library build dependencies:

 - cmake >= 3.12 (Mac OS X: cmake >= 3.17)
 - A C compiler
 - Doxygen (optional, only needed to build/install API documentation)

Building
========

libserialport uses CMake as build system generator, and thus can be built
on various OSes and using various development environments using the
respective "CMake generator". For details please refer to the CMake docs:

 https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html

Example on Linux:

 $ mkdir build
 $ cd build
 $ cmake -DCMAKE_INSTALL_PREFIX=/some/path ..
 $ make
 $ make install

On Mac OS X, libserialport can be built via Homebrew or Macports or Fink, or
"natively" via Xcode.

On Windows, libserialport can be built "natively" via Visual Studio, or using
MSYS2, or using Cygwin, or using WSL, or using cross-compilation e.g. via MXE.

To build from MSYS2, the following packages must be installed: cmake, make, and
either mingw-w64-i686-gcc (for 32-bit) or mingw-w64-x86_64-gcc (for 64-bit).
Open either the "MSYS2 MinGW 32-bit" or "MSYS2 MinGW 64-bit" command window
from the Start menu and use the "MSYS Makefiles" CMake generator.
Using the "MSYS2 MSYS" shell will build against the Cygwin compatibility layer;
this works, but port enumeration and metadata will not be available, and
binaries will depend on Cygwin. The builds produced by MinGW-w64 are normal
Windows DLLs without additional dependencies.

CMake options
=============

In addition to all standard CMake options, libserialport also provides:

  - BUILD_SHARED_LIBS: Shared (non-static) build (default: TRUE)
  - BUILD_TESTING: Build unit tests (default: TRUE)
  - BUILD_EXAMPLES: Build examples (default: TRUE)
  - BUILD_DOCS: Build/install documentation (default: FALSE)

Usage in your project
=====================

If your project uses CMake, integrating libserialport can be done as follows:

  find_package(serialport)
  target_link_libraries(sometarget PRIVATE serialport::serialport)

Otherwise, you can also use the standard pkg-config mechanism to find
and use libserialport.

API
===

Doxygen API documentation is included.

It can also be viewed online at:

  https://sigrok.org/api/libserialport/unstable/

Bug reports
===========

You can report bugs for libserialport at https://sigrok.org/bugzilla.

Mailing list
============

 https://lists.sourceforge.net/lists/listinfo/sigrok-devel

IRC
===

You can find the developers in the #sigrok IRC channel on Freenode.

Website
=======

https://sigrok.org/wiki/Libserialport

